{
  "language": "Solidity",
  "sources": {
    "contracts/FundMe.sol": {
      "content": "// SPDX-License-Identifier: MIT\npragma solidity 0.8.8;\n\nimport \"./PriceConvertor.sol\";\n\n// It is best practice to use contract name with __ and then error name\nerror FundMe__NotOwner();\n\ncontract FundMe {\n    using PriceConvertor for uint256;\n\n    uint256 public number;\n\n    uint256 public constant MINIMUM_USD = 50 * 1e18; // We have to keep the uints same everywhere\n    // When we are comparing the values in sendUsd function, we are comapring msg.value coming from getConversionPrice function\n    // which has 18 decimal points so we have to convert our dollar price in 18 decimal points as well\n    address[] private s_funders;\n    mapping(address => uint256) private s_funderAmount;\n    AggregatorV3Interface private s_priceFeed;\n    address private immutable i_owner;\n\n    constructor(address priceFeedAddress) {\n        // When the contract is deployed, the msg.sender in that case will be the owner of the contract.\n        // So we can save the value of owner in constructor.\n        i_owner = msg.sender;\n        s_priceFeed = AggregatorV3Interface(priceFeedAddress);\n    }\n\n    // function sendTest() public payable {\n    //     number = 5;\n\n    //     // Here if require statement is not met, the number will be reverted back to 0 and you have to pay gas for this\n    //     // and remaining gas will be sent back\n\n    //     // Want to send minimum amount in Ether\n\n    //     // What is reverting, undo any action and send remaining gas back\n\n    //     require(msg.value > 1e18, \"Didn't send enough\");\n    //     // 1e18 is one ETH\n    // }\n\n    function sendUsd() public payable {\n        // here the numberUsd is 50 $ which needs to be compared with 1 ETH\n        // We need to get the price of one ether in terms of USD to compare\n        // Blockchain cannot interact with external systems that is why we have to use Decentralized oracle network\n\n        require(\n            msg.value.getConversionPrice(s_priceFeed) > MINIMUM_USD,\n            \"Didn't send enough\"\n        );\n\n        // msg.value returns ETH in terms of wei which has 18 decimal points\n        // convert msg.value from layer 1 / ETH to USD\n        // The msg.value depends on what blockchain we are working with, it can be ETH, Avalanche or polygon\n\n        s_funders.push(msg.sender);\n        s_funderAmount[msg.sender] = msg.value;\n    }\n\n    function withdraw() public payable onlyOwner {\n        for (\n            uint256 funderIndex = 0;\n            funderIndex < s_funders.length;\n            funderIndex++\n        ) {\n            address funderAddress = s_funders[funderIndex];\n            s_funderAmount[funderAddress] = 0;\n        }\n\n        // Resetting an array, the 0 here defines how many elements will be there in an array to start with.\n\n        s_funders = new address[](0);\n\n        // msg.sender = address\n        // payable(msg.sender) = payable address\n\n        // withdraw the funds to an address\n\n        // transfer, if this send fails it will just return error and return transaction\n        //payable(msg.sender).transfer(address(this).balance);\n\n        // send, if this send passes it will return boolean\n        //bool sendSuccess = payable(msg.sender).send(address(this).balance);\n        // This require states if sendSuccess is true then continue executing the lines else display the error\n        //require(sendSuccess,\"Transfer Failed!!\");\n\n        //call, we can use this function to call any function in ethereum without an ABI\n        // In paranthesis we define which function we want to call in ethereum network\n        // we can leave it blank by inputting double quotes\n        //(bool txnSuccess, bytes memory dataReturned) = payable(msg.sender).call{value: address(this).balance}(\"\");\n\n        (bool txnSuccess, ) = payable(msg.sender).call{\n            value: address(this).balance\n        }(\"\");\n        require(txnSuccess, \"Transfer Failed!!\");\n    }\n\n    function cheaperWithdraw() public payable onlyOwner {\n        // In for loop, we are comparing our index with s_funders.length that is a storag variable so\n        // it is costing us a lot of gas. We are reading a ton from storage here\n        // Also address funderAddress = s_funders[funderIndex] is also reading from storage a lot\n\n        // for (\n        //     uint256 funderIndex = 0;\n        //     funderIndex < s_funders.length;\n        //     funderIndex++\n        // ) {\n        //     address funderAddress = s_funders[funderIndex];\n        //     s_funderAmount[funderAddress] = 0;\n        // }\n\n        // mappings can't be in memory\n        address[] memory fundersArray = s_funders;\n\n        for (\n            uint256 funderIndex = 0;\n            funderIndex < fundersArray.length;\n            funderIndex++\n        ) {\n            address funderAddress = fundersArray[funderIndex];\n            s_funderAmount[funderAddress] = 0;\n        }\n\n        s_funders = new address[](0);\n\n        (bool txnSuccess, ) = payable(msg.sender).call{\n            value: address(this).balance\n        }(\"\");\n        require(txnSuccess, \"Transfer Failed!!\");\n    }\n\n    modifier onlyOwner() {\n        if (msg.sender != i_owner) {\n            revert FundMe__NotOwner();\n        }\n        //require(msg.sender == i_owner,\"Sender is not owner!!\");\n        // This _ means that the above line will be executed first and then all the code writtern in the function\n        // will be executed to which this modifier has been applied.\n        _;\n    }\n\n    // What happens if someone sends this contract ETH directly ?\n\n    receive() external payable {\n        sendUsd();\n    }\n\n    fallback() external payable {\n        sendUsd();\n    }\n\n    // getters & setters\n\n    function getOwner() public view returns (address) {\n        return i_owner;\n    }\n\n    function getFunders(uint256 funderIndex) public view returns (address) {\n        return s_funders[funderIndex];\n    }\n\n    function getFunderAmount(address funderAddress)\n        public\n        view\n        returns (uint256)\n    {\n        return s_funderAmount[funderAddress];\n    }\n\n    function getPriceFeed() public view returns (AggregatorV3Interface) {\n        return s_priceFeed;\n    }\n}\n\n// Functions Order\n// constructor\n// receive\n// fallback\n// external\n// public\n// internal\n// private\n// view/pure (getters)\n"
    },
    "contracts/PriceConvertor.sol": {
      "content": "// SPDX-License-Identifier: MIT\npragma solidity 0.8.8;\n\nimport \"@chainlink/contracts/src/v0.8/interfaces/AggregatorV3Interface.sol\";\n\nlibrary PriceConvertor {\n    function getPrice(AggregatorV3Interface priceFeed)\n        internal\n        view\n        returns (uint256)\n    {\n        // To get price of eth in terms of USD we have to interact with oracle databases outside our blockchain\n        // We will use a interface here to get the price of ETH in terms of USD\n        // To interact with outside contracts or interfaces we need ABI and address which we can get from docs.chain.link\n        // https://docs.chain.link/docs/ethereum-addresses/ and choose the network that you are on rinkeby, kovan\n        // AggregatorV3Interface priceFeed = AggregatorV3Interface(\n        //     0x9326BFA02ADD2366b30bacB125260Af641031331\n        // );\n\n        (, int256 answer, , , ) = priceFeed.latestRoundData();\n        // Price that came in answer has 8 decimal points so we are adding 10 more decimal points to answer because we\n        // have to compare it with ETH value which is in terms of wei which has 18 decimal points\n        return uint256(answer * 1e10);\n    }\n\n    // function getDecimal() internal view returns (uint8) {\n    //     AggregatorV3Interface decimalFeed = AggregatorV3Interface(\n    //         0x9326BFA02ADD2366b30bacB125260Af641031331\n    //     );\n    //     return decimalFeed.decimals();\n    // }\n\n    // function getVersion() internal view returns (uint256) {\n    //     AggregatorV3Interface versionFeed = AggregatorV3Interface(\n    //         0x9326BFA02ADD2366b30bacB125260Af641031331\n    //     );\n    //     return versionFeed.version();\n    // }\n\n    function getConversionPrice(\n        uint256 ethValue,\n        AggregatorV3Interface priceFeed\n    ) internal view returns (uint256) {\n        uint256 priceOfUsdInEth = getPrice(priceFeed);\n        // 2 Eth * (Value of 1 eth in usd)\n        // Because both values have 18 decimal points when we multiply them it will give us 36 decimal points\n        // so we are dividing it with 1**18 decimal points\n        uint256 convertedValue = (ethValue * priceOfUsdInEth) / 1e18;\n        return convertedValue;\n    }\n}\n"
    },
    "@chainlink/contracts/src/v0.8/interfaces/AggregatorV3Interface.sol": {
      "content": "// SPDX-License-Identifier: MIT\npragma solidity ^0.8.0;\n\ninterface AggregatorV3Interface {\n  function decimals() external view returns (uint8);\n\n  function description() external view returns (string memory);\n\n  function version() external view returns (uint256);\n\n  // getRoundData and latestRoundData should both raise \"No data present\"\n  // if they do not have data to report, instead of returning unset values\n  // which could be misinterpreted as actual reported values.\n  function getRoundData(uint80 _roundId)\n    external\n    view\n    returns (\n      uint80 roundId,\n      int256 answer,\n      uint256 startedAt,\n      uint256 updatedAt,\n      uint80 answeredInRound\n    );\n\n  function latestRoundData()\n    external\n    view\n    returns (\n      uint80 roundId,\n      int256 answer,\n      uint256 startedAt,\n      uint256 updatedAt,\n      uint80 answeredInRound\n    );\n}\n"
    }
  },
  "settings": {
    "optimizer": {
      "enabled": false,
      "runs": 200
    },
    "outputSelection": {
      "*": {
        "*": [
          "abi",
          "evm.bytecode",
          "evm.deployedBytecode",
          "evm.methodIdentifiers",
          "metadata",
          "devdoc",
          "userdoc",
          "storageLayout",
          "evm.gasEstimates"
        ],
        "": [
          "ast"
        ]
      }
    },
    "metadata": {
      "useLiteralContent": true
    }
  }
}